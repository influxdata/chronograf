package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMrFusionAPI creates a new MrFusion instance
func NewMrFusionAPI(spec *loads.Document) *MrFusionAPI {
	return &MrFusionAPI{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
	}
}

/*MrFusionAPI Fuel for Chronograf */
type MrFusionAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// DeleteDashboardsIDHandler sets the operation handler for the delete dashboards ID operation
	DeleteDashboardsIDHandler DeleteDashboardsIDHandler
	// DeleteSourcesIDHandler sets the operation handler for the delete sources ID operation
	DeleteSourcesIDHandler DeleteSourcesIDHandler
	// DeleteSourcesIDRolesRoleIDHandler sets the operation handler for the delete sources ID roles role ID operation
	DeleteSourcesIDRolesRoleIDHandler DeleteSourcesIDRolesRoleIDHandler
	// DeleteSourcesIDUsersUserIDHandler sets the operation handler for the delete sources ID users user ID operation
	DeleteSourcesIDUsersUserIDHandler DeleteSourcesIDUsersUserIDHandler
	// DeleteSourcesIDUsersUserIDExplorationsExplorationIDHandler sets the operation handler for the delete sources ID users user ID explorations exploration ID operation
	DeleteSourcesIDUsersUserIDExplorationsExplorationIDHandler DeleteSourcesIDUsersUserIDExplorationsExplorationIDHandler
	// GetHandler sets the operation handler for the get operation
	GetHandler GetHandler
	// GetDashboardsHandler sets the operation handler for the get dashboards operation
	GetDashboardsHandler GetDashboardsHandler
	// GetDashboardsIDHandler sets the operation handler for the get dashboards ID operation
	GetDashboardsIDHandler GetDashboardsIDHandler
	// GetSourcesHandler sets the operation handler for the get sources operation
	GetSourcesHandler GetSourcesHandler
	// GetSourcesIDHandler sets the operation handler for the get sources ID operation
	GetSourcesIDHandler GetSourcesIDHandler
	// GetSourcesIDMonitoredHandler sets the operation handler for the get sources ID monitored operation
	GetSourcesIDMonitoredHandler GetSourcesIDMonitoredHandler
	// GetSourcesIDPermissionsHandler sets the operation handler for the get sources ID permissions operation
	GetSourcesIDPermissionsHandler GetSourcesIDPermissionsHandler
	// GetSourcesIDRolesHandler sets the operation handler for the get sources ID roles operation
	GetSourcesIDRolesHandler GetSourcesIDRolesHandler
	// GetSourcesIDRolesRoleIDHandler sets the operation handler for the get sources ID roles role ID operation
	GetSourcesIDRolesRoleIDHandler GetSourcesIDRolesRoleIDHandler
	// GetSourcesIDUsersHandler sets the operation handler for the get sources ID users operation
	GetSourcesIDUsersHandler GetSourcesIDUsersHandler
	// GetSourcesIDUsersUserIDHandler sets the operation handler for the get sources ID users user ID operation
	GetSourcesIDUsersUserIDHandler GetSourcesIDUsersUserIDHandler
	// GetSourcesIDUsersUserIDExplorationsHandler sets the operation handler for the get sources ID users user ID explorations operation
	GetSourcesIDUsersUserIDExplorationsHandler GetSourcesIDUsersUserIDExplorationsHandler
	// GetSourcesIDUsersUserIDExplorationsExplorationIDHandler sets the operation handler for the get sources ID users user ID explorations exploration ID operation
	GetSourcesIDUsersUserIDExplorationsExplorationIDHandler GetSourcesIDUsersUserIDExplorationsExplorationIDHandler
	// PatchSourcesIDHandler sets the operation handler for the patch sources ID operation
	PatchSourcesIDHandler PatchSourcesIDHandler
	// PatchSourcesIDRolesRoleIDHandler sets the operation handler for the patch sources ID roles role ID operation
	PatchSourcesIDRolesRoleIDHandler PatchSourcesIDRolesRoleIDHandler
	// PatchSourcesIDUsersUserIDHandler sets the operation handler for the patch sources ID users user ID operation
	PatchSourcesIDUsersUserIDHandler PatchSourcesIDUsersUserIDHandler
	// PatchSourcesIDUsersUserIDExplorationsExplorationIDHandler sets the operation handler for the patch sources ID users user ID explorations exploration ID operation
	PatchSourcesIDUsersUserIDExplorationsExplorationIDHandler PatchSourcesIDUsersUserIDExplorationsExplorationIDHandler
	// PostDashboardsHandler sets the operation handler for the post dashboards operation
	PostDashboardsHandler PostDashboardsHandler
	// PostSourcesHandler sets the operation handler for the post sources operation
	PostSourcesHandler PostSourcesHandler
	// PostSourcesIDProxyHandler sets the operation handler for the post sources ID proxy operation
	PostSourcesIDProxyHandler PostSourcesIDProxyHandler
	// PostSourcesIDRolesHandler sets the operation handler for the post sources ID roles operation
	PostSourcesIDRolesHandler PostSourcesIDRolesHandler
	// PostSourcesIDUsersHandler sets the operation handler for the post sources ID users operation
	PostSourcesIDUsersHandler PostSourcesIDUsersHandler
	// PostSourcesIDUsersUserIDExplorationsHandler sets the operation handler for the post sources ID users user ID explorations operation
	PostSourcesIDUsersUserIDExplorationsHandler PostSourcesIDUsersUserIDExplorationsHandler
	// PutDashboardsIDHandler sets the operation handler for the put dashboards ID operation
	PutDashboardsIDHandler PutDashboardsIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MrFusionAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MrFusionAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MrFusionAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MrFusionAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MrFusionAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MrFusionAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MrFusionAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MrFusionAPI
func (o *MrFusionAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DeleteDashboardsIDHandler == nil {
		unregistered = append(unregistered, "DeleteDashboardsIDHandler")
	}

	if o.DeleteSourcesIDHandler == nil {
		unregistered = append(unregistered, "DeleteSourcesIDHandler")
	}

	if o.DeleteSourcesIDRolesRoleIDHandler == nil {
		unregistered = append(unregistered, "DeleteSourcesIDRolesRoleIDHandler")
	}

	if o.DeleteSourcesIDUsersUserIDHandler == nil {
		unregistered = append(unregistered, "DeleteSourcesIDUsersUserIDHandler")
	}

	if o.DeleteSourcesIDUsersUserIDExplorationsExplorationIDHandler == nil {
		unregistered = append(unregistered, "DeleteSourcesIDUsersUserIDExplorationsExplorationIDHandler")
	}

	if o.GetHandler == nil {
		unregistered = append(unregistered, "GetHandler")
	}

	if o.GetDashboardsHandler == nil {
		unregistered = append(unregistered, "GetDashboardsHandler")
	}

	if o.GetDashboardsIDHandler == nil {
		unregistered = append(unregistered, "GetDashboardsIDHandler")
	}

	if o.GetSourcesHandler == nil {
		unregistered = append(unregistered, "GetSourcesHandler")
	}

	if o.GetSourcesIDHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDHandler")
	}

	if o.GetSourcesIDMonitoredHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDMonitoredHandler")
	}

	if o.GetSourcesIDPermissionsHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDPermissionsHandler")
	}

	if o.GetSourcesIDRolesHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDRolesHandler")
	}

	if o.GetSourcesIDRolesRoleIDHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDRolesRoleIDHandler")
	}

	if o.GetSourcesIDUsersHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDUsersHandler")
	}

	if o.GetSourcesIDUsersUserIDHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDUsersUserIDHandler")
	}

	if o.GetSourcesIDUsersUserIDExplorationsHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDUsersUserIDExplorationsHandler")
	}

	if o.GetSourcesIDUsersUserIDExplorationsExplorationIDHandler == nil {
		unregistered = append(unregistered, "GetSourcesIDUsersUserIDExplorationsExplorationIDHandler")
	}

	if o.PatchSourcesIDHandler == nil {
		unregistered = append(unregistered, "PatchSourcesIDHandler")
	}

	if o.PatchSourcesIDRolesRoleIDHandler == nil {
		unregistered = append(unregistered, "PatchSourcesIDRolesRoleIDHandler")
	}

	if o.PatchSourcesIDUsersUserIDHandler == nil {
		unregistered = append(unregistered, "PatchSourcesIDUsersUserIDHandler")
	}

	if o.PatchSourcesIDUsersUserIDExplorationsExplorationIDHandler == nil {
		unregistered = append(unregistered, "PatchSourcesIDUsersUserIDExplorationsExplorationIDHandler")
	}

	if o.PostDashboardsHandler == nil {
		unregistered = append(unregistered, "PostDashboardsHandler")
	}

	if o.PostSourcesHandler == nil {
		unregistered = append(unregistered, "PostSourcesHandler")
	}

	if o.PostSourcesIDProxyHandler == nil {
		unregistered = append(unregistered, "PostSourcesIDProxyHandler")
	}

	if o.PostSourcesIDRolesHandler == nil {
		unregistered = append(unregistered, "PostSourcesIDRolesHandler")
	}

	if o.PostSourcesIDUsersHandler == nil {
		unregistered = append(unregistered, "PostSourcesIDUsersHandler")
	}

	if o.PostSourcesIDUsersUserIDExplorationsHandler == nil {
		unregistered = append(unregistered, "PostSourcesIDUsersUserIDExplorationsHandler")
	}

	if o.PutDashboardsIDHandler == nil {
		unregistered = append(unregistered, "PutDashboardsIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MrFusionAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MrFusionAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *MrFusionAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MrFusionAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MrFusionAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

func (o *MrFusionAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MrFusionAPI) initHandlerCache() {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dashboards/{id}"] = NewDeleteDashboardsID(o.context, o.DeleteDashboardsIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/sources/{id}"] = NewDeleteSourcesID(o.context, o.DeleteSourcesIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/sources/{id}/roles/{role_id}"] = NewDeleteSourcesIDRolesRoleID(o.context, o.DeleteSourcesIDRolesRoleIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/sources/{id}/users/{user_id}"] = NewDeleteSourcesIDUsersUserID(o.context, o.DeleteSourcesIDUsersUserIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/sources/{id}/users/{user_id}/explorations/{exploration_id}"] = NewDeleteSourcesIDUsersUserIDExplorationsExplorationID(o.context, o.DeleteSourcesIDUsersUserIDExplorationsExplorationIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/"] = NewGet(o.context, o.GetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboards"] = NewGetDashboards(o.context, o.GetDashboardsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboards/{id}"] = NewGetDashboardsID(o.context, o.GetDashboardsIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources"] = NewGetSources(o.context, o.GetSourcesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}"] = NewGetSourcesID(o.context, o.GetSourcesIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/monitored"] = NewGetSourcesIDMonitored(o.context, o.GetSourcesIDMonitoredHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/permissions"] = NewGetSourcesIDPermissions(o.context, o.GetSourcesIDPermissionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/roles"] = NewGetSourcesIDRoles(o.context, o.GetSourcesIDRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/roles/{role_id}"] = NewGetSourcesIDRolesRoleID(o.context, o.GetSourcesIDRolesRoleIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/users"] = NewGetSourcesIDUsers(o.context, o.GetSourcesIDUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/users/{user_id}"] = NewGetSourcesIDUsersUserID(o.context, o.GetSourcesIDUsersUserIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/users/{user_id}/explorations"] = NewGetSourcesIDUsersUserIDExplorations(o.context, o.GetSourcesIDUsersUserIDExplorationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sources/{id}/users/{user_id}/explorations/{exploration_id}"] = NewGetSourcesIDUsersUserIDExplorationsExplorationID(o.context, o.GetSourcesIDUsersUserIDExplorationsExplorationIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/sources/{id}"] = NewPatchSourcesID(o.context, o.PatchSourcesIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/sources/{id}/roles/{role_id}"] = NewPatchSourcesIDRolesRoleID(o.context, o.PatchSourcesIDRolesRoleIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/sources/{id}/users/{user_id}"] = NewPatchSourcesIDUsersUserID(o.context, o.PatchSourcesIDUsersUserIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/sources/{id}/users/{user_id}/explorations/{exploration_id}"] = NewPatchSourcesIDUsersUserIDExplorationsExplorationID(o.context, o.PatchSourcesIDUsersUserIDExplorationsExplorationIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dashboards"] = NewPostDashboards(o.context, o.PostDashboardsHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sources"] = NewPostSources(o.context, o.PostSourcesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sources/{id}/proxy"] = NewPostSourcesIDProxy(o.context, o.PostSourcesIDProxyHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sources/{id}/roles"] = NewPostSourcesIDRoles(o.context, o.PostSourcesIDRolesHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sources/{id}/users"] = NewPostSourcesIDUsers(o.context, o.PostSourcesIDUsersHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/sources/{id}/users/{user_id}/explorations"] = NewPostSourcesIDUsersUserIDExplorations(o.context, o.PostSourcesIDUsersUserIDExplorationsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/dashboards/{id}"] = NewPutDashboardsID(o.context, o.PutDashboardsIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MrFusionAPI) Serve(builder middleware.Builder) http.Handler {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}

	return o.context.APIHandler(builder)
}
